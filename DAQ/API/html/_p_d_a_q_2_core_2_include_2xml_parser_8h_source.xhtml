<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<title>/data/Software/DAQ/PDAQ/Core/Include/xmlParser.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="splash_API.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_p_d_a_q_2_core_2_include_2xml_parser_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">xmlParser.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#ifndef __INCLUDE_XML_NODE__</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#define __INCLUDE_XML_NODE__</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifdef _UNICODE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// If you comment the next &quot;define&quot; line then the library will never &quot;switch to&quot; _UNICODE (wchar_t*) mode (16/32 bits per characters).</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// This is useful when you get error messages like:</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">//    &#39;XMLNode::openFileHelper&#39; : cannot convert parameter 2 from &#39;const char [5]&#39; to &#39;const wchar_t *&#39;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// The _XMLWIDECHAR preprocessor variable force the XMLParser library into either utf16/32-mode (the proprocessor variable</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// must be defined) or utf8-mode(the pre-processor variable must be undefined).</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#define _XMLWIDECHAR</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#if defined(WIN32) || defined(UNDER_CE)</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// comment the next line if you are under windows and the compiler is not Microsoft Visual Studio (6.0 or .NET)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#define _XMLWINDOWS</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#ifdef XMLDLLENTRY</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#undef XMLDLLENTRY</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#ifdef _USE_XMLPARSER_DLL</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifdef _DLL_EXPORTS_</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#define XMLDLLENTRY __declspec(dllexport)</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#define XMLDLLENTRY __declspec(dllimport)</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define XMLDLLENTRY</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">// uncomment the next line if you want no support for wchar_t* (no need for the &lt;wchar.h&gt; or &lt;tchar.h&gt; libraries anymore to compile)</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">//#define XML_NO_WIDE_CHAR</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#ifdef XML_NO_WIDE_CHAR</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#undef _XMLWINDOWS</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#undef _XMLWIDECHAR</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#ifdef _XMLWINDOWS</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &lt;tchar.h&gt;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">   59</a></span>&#160;<span class="preprocessor">#define XMLDLLENTRY</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#ifndef XML_NO_WIDE_CHAR</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#include &lt;wchar.h&gt;</span> <span class="comment">// to have &#39;wcsrtombs&#39; for ANSI version</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                   <span class="comment">// to have &#39;mbsrtowcs&#39; for WIDECHAR version</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">// Some common types for char set portable code</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifdef _XMLWIDECHAR</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">    #ifndef _X</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">        #define _X(c) L ## c</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">    #define XMLCSTR const wchar_t *</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    #define XMLSTR  wchar_t *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    #define XMLCHAR wchar_t</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">    #ifndef _X</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ae9100437ff28f69108a68b0f48fc7760">   76</a></span>&#160;<span class="preprocessor">        #define _X(c) c</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">   78</a></span>&#160;<span class="preprocessor">    #define XMLCSTR const char *</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">   79</a></span>&#160;<span class="preprocessor">    #define XMLSTR  char *</span></div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a9f587fbd233e721e8818a3bf8102838f">   80</a></span>&#160;<span class="preprocessor">    #define XMLCHAR char</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#ifndef FALSE</span></div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">   83</a></span>&#160;<span class="preprocessor">    #define FALSE 0</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* FALSE */</span><span class="preprocessor"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#ifndef TRUE</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa8cecfc5c5c054d2875c03e77b7be15d">   86</a></span>&#160;<span class="preprocessor">    #define TRUE 1</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* TRUE */</span><span class="preprocessor"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">// Enumeration for XML parse errors.</span></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">   91</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a7cf226016a9a9ebc47ee5124e413b511">   93</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a7cf226016a9a9ebc47ee5124e413b511">eXMLErrorNone</a> = 0,</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26a80e15de947fae9fb44b67e1a3a263">   94</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26a80e15de947fae9fb44b67e1a3a263">eXMLErrorMissingEndTag</a>,</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a164e2a597f12c1b2e186519fc893cc58">   95</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a164e2a597f12c1b2e186519fc893cc58">eXMLErrorNoXMLTagFound</a>,</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a0961a8e0bbf11a91009adaf4b1c66e46">   96</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a0961a8e0bbf11a91009adaf4b1c66e46">eXMLErrorEmpty</a>,</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a943343714a3946a264fa0bfa7a4fbe7d">   97</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a943343714a3946a264fa0bfa7a4fbe7d">eXMLErrorMissingTagName</a>,</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a489af43e5e1f882ed5c3dd9f59bbfde4">   98</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a489af43e5e1f882ed5c3dd9f59bbfde4">eXMLErrorMissingEndTagName</a>,</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a4eb9d0115e3d9fcfad342c7387c26c63">   99</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a4eb9d0115e3d9fcfad342c7387c26c63">eXMLErrorUnmatchedEndTag</a>,</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a90b020017d16093c6ccff3ccf3d92ee8">  100</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a90b020017d16093c6ccff3ccf3d92ee8">eXMLErrorUnmatchedEndClearTag</a>,</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26e2e2231f2d3941d4b4bbb96cd9ed2c">  101</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26e2e2231f2d3941d4b4bbb96cd9ed2c">eXMLErrorUnexpectedToken</a>,</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5ad0687f19145845937f24cecd9f5e9fa9">  102</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5ad0687f19145845937f24cecd9f5e9fa9">eXMLErrorNoElements</a>,</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a55441ddd2419acb3674a9068f5c3930f">  103</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a55441ddd2419acb3674a9068f5c3930f">eXMLErrorFileNotFound</a>,</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a750c78b6de79d89e2184fc7caff939e0">  104</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a750c78b6de79d89e2184fc7caff939e0">eXMLErrorFirstTagNotFound</a>,</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5aeca604d14ec57d6dcfdc5e74dbc559dc">  105</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5aeca604d14ec57d6dcfdc5e74dbc559dc">eXMLErrorUnknownCharacterEntity</a>,</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a5e54f63f442005ae89fdf1fe4fb17725">  106</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a5e54f63f442005ae89fdf1fe4fb17725">eXMLErrorCharConversionError</a>,</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a8596c0bf247f549ff306b6889fe2cb5c">  107</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a8596c0bf247f549ff306b6889fe2cb5c">eXMLErrorCannotOpenWriteFile</a>,</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a1dad0c33ae33d61b2f5f6f7f72838209">  108</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a1dad0c33ae33d61b2f5f6f7f72838209">eXMLErrorCannotWriteFile</a>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a85384d57e765bd52aaaa06096cb186d9">  110</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a85384d57e765bd52aaaa06096cb186d9">eXMLErrorBase64DataSizeIsNotMultipleOf4</a>,</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5afc16bb8e15fab680665d3b8bedfc980b">  111</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5afc16bb8e15fab680665d3b8bedfc980b">eXMLErrorBase64DecodeIllegalCharacter</a>,</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5af2d54f7b3a0299a7051a196a125bf62d">  112</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5af2d54f7b3a0299a7051a196a125bf62d">eXMLErrorBase64DecodeTruncatedData</a>,</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5adcc1aaa78e2f45feb792585ab1d747bd">  113</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5adcc1aaa78e2f45feb792585ab1d747bd">eXMLErrorBase64DecodeBufferTooSmall</a></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">// Enumeration used to manage type of data. Use in conjunction with structure XMLNodeContents</span></div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">  118</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851abef700648a317ca089d00a9285791f8f">  120</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851abef700648a317ca089d00a9285791f8f">eNodeChild</a>=0,</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a98e1935d617c2377530661c2d8905d46">  121</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a98e1935d617c2377530661c2d8905d46">eNodeAttribute</a>=1,</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a0d667f729ee0477d741d7939cf025201">  122</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a0d667f729ee0477d741d7939cf025201">eNodeText</a>=2,</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851ae32d7d859f74292c7474f96804f0cf81">  123</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851ae32d7d859f74292c7474f96804f0cf81">eNodeClear</a>=3,</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a1e67ba6c14f35fdc461da667721bff31">  124</a></span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a1e67ba6c14f35fdc461da667721bff31">eNodeNULL</a>=4</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">// Structure used to obtain error details if the parse fails.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct_x_m_l_results.xhtml">XMLResults</a></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">enum</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> <a class="code" href="struct_x_m_l_results.xhtml#adb341083266eabf9fe45587b838c0962">error</a>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">int</span>  <a class="code" href="struct_x_m_l_results.xhtml#a8741d887c2843fc1ce8fffc12f662595">nLine</a>,<a class="code" href="struct_x_m_l_results.xhtml#af0d1358dbb7b124d2e8e4d9052509c8e">nColumn</a>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aafbd547d290f82864b1f840025e972bc">XMLResults</a>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// Structure for XML clear (unformatted) node (usually comments)</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue; <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOpenTag; <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszCloseTag;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac66e91f36b3c0c314c4fc8894820aee8">XMLClear</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">// Structure for XML attribute.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName; <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a4a11e7f02fa98cb7850c6d33e5eb9a77">XMLAttribute</a>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">// XMLElementPosition are not interchangeable with simple indexes</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">  145</a></span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">int</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">struct </span><a class="code" href="struct_x_m_l_node_contents.xhtml">XMLNodeContents</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">struct </span>XMLNodeDataTag;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// protected constructors: use one of these four methods to get your first instance of XMLNode:</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">//  - parseString</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">//  - parseFile</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">//  - openFileHelper</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">//  - createXMLTopNode</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a40876d6c58776ec0adb69baea534b2de">XMLNode</a>(<span class="keyword">struct</span> XMLNodeDataTag *pParent, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszName, <span class="keywordtype">char</span> isDeclaration);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a40876d6c58776ec0adb69baea534b2de">XMLNode</a>(<span class="keyword">struct</span> XMLNodeDataTag *p);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// You can create your first instance of XMLNode with these 4 functions:</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// (see complete explanation of parameters below)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> createXMLTopNode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName, <span class="keywordtype">char</span> isDeclaration=<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> parseString   (<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>  lpXMLString, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> tag=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="struct_x_m_l_results.xhtml">XMLResults</a> *pResults=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> parseFile     (<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>     filename, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> tag=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="struct_x_m_l_results.xhtml">XMLResults</a> *pResults=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> openFileHelper(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>     filename, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> tag=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>                           );</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// The tag parameter should be the name of the first tag inside the XML file.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// If the tag parameter is omitted, the 3 functions return a node that represents</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// the head of the xml document including the declaration term (&lt;? ... ?&gt;).</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// The &quot;openFileHelper&quot; reports to the screen all the warnings &amp; errors that occurred during</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// parsing of the XML file. Since each application has its own way to report and deal with errors,</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// you should rather use the &quot;parseFile&quot; function to parse XML files and program yourself thereafter</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// an &quot;error reporting&quot; tailored for your needs (instead of using the very crude &quot;error reporting&quot;</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// mechanism included inside the &quot;openFileHelper&quot; function).</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// If the XML document is corrupted:</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">//   * The &quot;openFileHelper&quot; method will:</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">//         - display an error message on the console (or inside a messageBox for windows).</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">//         - stop execution (exit).</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">//     I suggest that you write your own &quot;openFileHelper&quot; method tailored to your needs.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">//   * The 2 other methods will initialize the &quot;pResults&quot; variable with some information that</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">//     can be used to trace the error.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">//   * If you still want to parse the file, you can use the APPROXIMATE_PARSING option as</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">//     explained inside the note at the beginning of the &quot;xmlParser.cpp&quot; file.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// You can have a user-friendly explanation of the parsing error with this function:</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">static</span> <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getError(<a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> <a class="code" href="struct_x_m_l_results.xhtml#adb341083266eabf9fe45587b838c0962">error</a>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">static</span> <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getVersion();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getName() <span class="keyword">const</span>;                                         <span class="comment">// name of the node</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getText(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                                  <span class="comment">// return ith text field</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">int</span> nText() <span class="keyword">const</span>;                                               <span class="comment">// nbr of text field</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> getParentNode() <span class="keyword">const</span>;                                   <span class="comment">// return the parent node</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> getChildNode(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                             <span class="comment">// return ith child node</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> getChildNode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name, <span class="keywordtype">int</span> i)  <span class="keyword">const</span>;                <span class="comment">// return ith child node with specific name</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                                     <span class="comment">//     (return an empty node if failing)</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> getChildNode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name, <span class="keywordtype">int</span> *i=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) <span class="keyword">const</span>;           <span class="comment">// return next child node with specific name</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                                     <span class="comment">//     (return an empty node if failing)</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> getChildNodeWithAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> tagName,               <span class="comment">// return child node with specific name/attribute</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                      <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> attributeName,         <span class="comment">//     (return an empty node if failing)</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                      <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> attributeValue=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,   <span class="comment">//</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                      <span class="keywordtype">int</span> *i=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)  <span class="keyword">const</span>;           <span class="comment">//</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">int</span> nChildNode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name) <span class="keyword">const</span>;                              <span class="comment">// return the number of child node with specific name</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">int</span> nChildNode() <span class="keyword">const</span>;                                          <span class="comment">// nbr of child node</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> getAttribute(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                        <span class="comment">// return ith attribute</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>      getAttributeName(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                    <span class="comment">// return ith attribute name</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>      getAttributeValue(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                   <span class="comment">// return ith attribute value</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">char</span>  isAttributeSet(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name) <span class="keyword">const</span>;                        <span class="comment">// test if an attribute with a specific name is given</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name, <span class="keywordtype">int</span> i) <span class="keyword">const</span>;                 <span class="comment">// return ith attribute content with specific name</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                                     <span class="comment">//     (return a NULL if failing)</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> getAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name, <span class="keywordtype">int</span> *i=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) <span class="keyword">const</span>;           <span class="comment">// return next attribute content with specific name</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                                                     <span class="comment">//     (return a NULL if failing)</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">int</span> nAttribute() <span class="keyword">const</span>;                                          <span class="comment">// nbr of attribute</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> getClear(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;                                <span class="comment">// return ith clear field (comments)</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">int</span> nClear() <span class="keyword">const</span>;                                              <span class="comment">// nbr of clear field</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> createXMLString(<span class="keywordtype">int</span> nFormat=1, <span class="keywordtype">int</span> *pnSize=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) <span class="keyword">const</span>;   <span class="comment">// create XML string starting from current XMLNode</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                                     <span class="comment">// if nFormat==0, no formatting is required</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                                     <span class="comment">// otherwise this returns an user friendly XML string from a</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                                     <span class="comment">// given element with appropriate white spaces and carriage returns.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                                     <span class="comment">// if pnSize is given it returns the size in character of the string.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> writeToFile(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> filename, <span class="keyword">const</span> <span class="keywordtype">char</span> *encoding=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keywordtype">char</span> nFormat=1) <span class="keyword">const</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                                     <span class="comment">// Save the content of an xmlNode inside a file.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                                                     <span class="comment">// The nFormat parameter has the same meaning as in the</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                                                     <span class="comment">// createXMLString function. If the global parameter</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                                     <span class="comment">// &quot;characterEncoding==encoding_UTF8&quot;, then the &quot;encoding&quot; parameter is</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                                     <span class="comment">// ignored and always set to &quot;utf-8&quot;. If the global parameter</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                                     <span class="comment">// &quot;characterEncoding==encoding_ShiftJIS&quot;, then the &quot;encoding&quot; parameter</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                                                     <span class="comment">// is ignored and always set to &quot;SHIFT-JIS&quot;. If &quot;_XMLWIDECHAR=1&quot;, then</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                                     <span class="comment">// the &quot;encoding&quot; parameter is ignored and always set to &quot;utf-16&quot;.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                                     <span class="comment">// If no &quot;encoding&quot; parameter is given the &quot;ISO-8859-1&quot; encoding is used.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="struct_x_m_l_node_contents.xhtml">XMLNodeContents</a> enumContents(<a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> i) <span class="keyword">const</span>;           <span class="comment">// enumerate all the different contents (attribute,child,text,</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                                     <span class="comment">//     clear) of the current XMLNode. The order is reflecting</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                                     <span class="comment">//     the order of the original file/string.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                                     <span class="comment">//     NOTE: 0 &lt;= i &lt; nElement();</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">int</span> nElement() <span class="keyword">const</span>;                                            <span class="comment">// nbr of different contents for current node</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">char</span> isEmpty() <span class="keyword">const</span>;                                            <span class="comment">// is this node Empty?</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">char</span> isDeclaration() <span class="keyword">const</span>;                                      <span class="comment">// is this node a declaration &lt;? .... ?&gt;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> deepCopy() <span class="keyword">const</span>;                                        <span class="comment">// deep copy (duplicate/clone) a XMLNode</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> emptyNode();                                      <span class="comment">// return XMLNode::emptyXMLNode;</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">// to allow shallow/fast copy:</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    ~<a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a40876d6c58776ec0adb69baea534b2de">XMLNode</a>(<span class="keyword">const</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> &amp;A);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>&amp; operator=( <span class="keyword">const</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>&amp; A );</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="struct_x_m_l_node.xhtml#a719b115adfb642594107854189559ff2">  252</a></span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml#a719b115adfb642594107854189559ff2">XMLNode</a>(): d(<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>){};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> emptyXMLNode;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> emptyXMLClear;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> emptyXMLAttribute;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// The following functions allows you to create from scratch (or update) a XMLNode structure</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Start by creating your top node with the &quot;createXMLTopNode&quot; function and then add new nodes with the &quot;addChild&quot; function.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">// The parameter &#39;pos&#39; gives the position where the childNode, the text or the XMLClearTag will be inserted.</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="comment">// The default value (pos=-1) inserts at the end. The value (pos=0) insert at the beginning (Insertion at the beginning is slower than at the end).</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// REMARK: 0 &lt;= pos &lt; nChild()+nText()+nClear()</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>       addChild(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName, <span class="keywordtype">char</span> isDeclaration=<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *addAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValuev);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>       addText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>     *addClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOpen=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszClose=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                                                       <span class="comment">// default values: lpszOpen =&quot;&lt;![CDATA[&quot;</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                                       <span class="comment">//                 lpszClose=&quot;]]&gt;&quot;</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>       addChild(<a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> nodeToAdd, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1); <span class="comment">// If the &quot;nodeToAdd&quot; has some parents, it will be detached</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                                       <span class="comment">// from it&#39;s parents before being attached to the current XMLNode</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Some update functions:</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>       updateName(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName);                                                    <span class="comment">// change node&#39;s name</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *updateAttribute(<a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *newAttribute, <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *oldAttribute);         <span class="comment">// if the attribute to update is missing, a new one will be added</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *updateAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewName=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,<span class="keywordtype">int</span> i=0);         <span class="comment">// if the attribute to update is missing, a new one will be added</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *updateAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewName,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldName);  <span class="comment">// set lpszNewName=NULL if you don&#39;t want to change the name of the attribute</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                                                                   <span class="comment">// if the attribute to update is missing, a new one will be added</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>       updateText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewValue, <span class="keywordtype">int</span> i=0);                                       <span class="comment">// if the text to update is missing, a new one will be added</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>       updateText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldValue);                          <span class="comment">// if the text to update is missing, a new one will be added</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>     *updateClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewContent, <span class="keywordtype">int</span> i=0);                                    <span class="comment">// if the clearTag to update is missing, a new one will be added</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>     *updateClear(<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *newP,<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *oldP);                                      <span class="comment">// if the clearTag to update is missing, a new one will be added</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>     *updateClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldValue);                         <span class="comment">// if the clearTag to update is missing, a new one will be added</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// Some deletion functions:</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">void</span> deleteNodeContent();  <span class="comment">// delete the content of this XMLNode and the subtree.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordtype">void</span> deleteAttribute(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszName);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">void</span> deleteAttribute(<span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordtype">void</span> deleteAttribute(<a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *anAttribute);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">void</span> deleteText(<span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordtype">void</span> deleteText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">void</span> deleteClear(<span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordtype">void</span> deleteClear(<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *p);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordtype">void</span> deleteClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// The strings given as parameters for the following add and update methods (all these methods have</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// a name with the postfix &quot;_WOSD&quot; that means &quot;WithOut String Duplication&quot; ) will be free&#39;d by the</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// XMLNode class. For example, it means that this is incorrect:</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">//    xNode.addText_WOSD(&quot;foo&quot;);</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">//    xNode.updateAttribute_WOSD(&quot;#newcolor&quot; ,NULL,&quot;color&quot;);</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// In opposition, this is correct:</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">//    xNode.addText(&quot;foo&quot;);</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">//    xNode.addText_WOSD(stringDup(&quot;foo&quot;));</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">//    xNode.updateAttribute(&quot;#newcolor&quot; ,NULL,&quot;color&quot;);</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">//    xNode.updateAttribute_WOSD(stringDup(&quot;#newcolor&quot;),NULL,&quot;color&quot;);</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">// Typically, you will never do:</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">//    char *b=(char*)malloc(...);</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">//    xNode.addText(b);</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">//    free(b);</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// ... but rather:</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">//    char *b=(char*)malloc(...);</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">//    xNode.addText_WOSD(b);</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">//    (&#39;free(b)&#39; is performed by the XMLNode class)</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> createXMLTopNode_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszName, <span class="keywordtype">char</span> isDeclaration=<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>        addChild_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszName, <span class="keywordtype">char</span> isDeclaration=<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a>  *addAttribute_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszName, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszValue);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>        addText_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszValue, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>      *addClear_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOpen=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszClose=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> pos=-1);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>        updateName_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszName);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a>  *updateAttribute_WOSD(<a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *newAttribute, <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *oldAttribute);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a>  *updateAttribute_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewName=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,<span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a>  *updateAttribute_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewName,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldName);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>        updateText_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewValue, <span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>        updateText_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldValue);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>      *updateClear_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewContent, <span class="keywordtype">int</span> i=0);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>      *updateClear_WOSD(<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *newP,<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *oldP);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>      *updateClear_WOSD(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszNewValue, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszOldValue);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// These are some useful functions when you want to insert a childNode, a text or a XMLClearTag in the</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// middle (at a specified position) of a XMLNode tree already constructed. The value returned by these</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// methods is to be used as last parameter (parameter &#39;pos&#39;) of addChild, addText or addClear.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfText(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue) <span class="keyword">const</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfClear(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue) <span class="keyword">const</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfClear(<a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *a) <span class="keyword">const</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfChildNode(<span class="keywordtype">int</span> i=0) <span class="keyword">const</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfChildNode(<a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> x) <span class="keyword">const</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> positionOfChildNode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> name, <span class="keywordtype">int</span> i=0) <span class="keyword">const</span>; <span class="comment">// return the position of the ith childNode with the specified name</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                                                      <span class="comment">// if (name==NULL) return the position of the ith childNode</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// The setGlobalOptions function allows you to change tree global parameters that affect string&amp;file</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// parsing. First of all, you most-probably will never have to change these 3 global parameters.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="comment">// The return value of the setGlobalOptions function is &quot;0&quot; when there are no errors. If you try to</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// set an unrecognized encoding then the return value will be &quot;1&quot; to signal an error.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// About the &quot;guessWideCharChars&quot; parameter:</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">//     If &quot;guessWideCharChars=1&quot; and if this library is compiled in WideChar mode, then the</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">//     &quot;parseFile&quot; and &quot;openFileHelper&quot; functions will test if the file contains ASCII</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="comment">//     characters. If this is the case, then the file will be loaded and converted in memory to</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">//     WideChar before being parsed. If &quot;guessWideCharChars=0&quot;, no conversion will</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">//     be performed.</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">//     If &quot;guessWideCharChars=1&quot; and if this library is compiled in ASCII/UTF8/char* mode, then the</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">//     &quot;parseFile&quot; and &quot;openFileHelper&quot; functions will test if the file contains WideChar</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="comment">//     characters. If this is the case, then the file will be loaded and converted in memory to</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="comment">//     ASCII/UTF8/char* before being parsed. If &quot;guessWideCharChars=0&quot;, no conversion will</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">//     be performed</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="comment">//     Sometime, it&#39;s useful to set &quot;guessWideCharChars=0&quot; to disable any conversion</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">//     because the test to detect the file-type (ASCII/UTF8/char* or WideChar) may fail (rarely).</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// About the &quot;characterEncoding&quot; parameter:</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="comment">//     This parameter is only meaningful when compiling in char* mode (multibyte character mode).</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">//     In wchar_t* (wide char mode), this parameter is ignored. This parameter should be one of the</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">//     three currently recognized encodings: XMLNode::encoding_UTF8, XMLNode::encoding_ascii,</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="comment">//     XMLNode::encoding_ShiftJIS.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="comment">// About the &quot;dropWhiteSpace&quot; parameter:</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">//     In most situations, text fields containing only white spaces (and carriage returns)</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">//     are useless. Even more, these &quot;empty&quot; text fields are annoying because they increase the</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">//     complexity of the user&#39;s code for parsing. So, 99% of the time, it&#39;s better to drop</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">//     the &quot;empty&quot; text fields. However The XML specification indicates that no white spaces</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="comment">//     should be lost when parsing the file. So to be perfectly XML-compliant, you should set</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">//     dropWhiteSpace=0. A note of caution: if you set &quot;dropWhiteSpace=0&quot;, the parser will be</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">//     slower and your code will be more complex.</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Enumeration for XML character encoding.</span></div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">  378</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">XMLCharEncoding</a> { encoding_UTF8=1, encoding_ascii=2, encoding_ShiftJIS=3 } <a class="code" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">XMLCharEncoding</a>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">char</span> setGlobalOptions(<a class="code" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">XMLCharEncoding</a> <a class="code" href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#aab8c180274ed444bbc56a3f413fe106c">characterEncoding</a>=<a class="code" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2ab55627cb5de434df8e064770f0e32782">XMLNode::encoding_UTF8</a>, <span class="keywordtype">char</span> <a class="code" href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#adec6e4712d4545b0fcc11000dc0dc0ca">guessWideCharChars</a>=1, <span class="keywordtype">char</span> <a class="code" href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#a5873e61a244487ba540cb71b39b630f7">dropWhiteSpace</a>=1);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// The next function try to guess the character encoding. You most-probably will never</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="comment">// have to use this function. It then returns the appropriate value of the global parameter</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// &quot;characterEncoding&quot; described above. The guess is based on the content of a buffer of length</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// &quot;bufLen&quot; bytes that contains the first bytes (minimum 25 bytes; 200 bytes is a good value) of the</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">// file to be parsed. The &quot;openFileHelper&quot; function is using this function to automatically compute</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// the value of the &quot;characterEncoding&quot; global parameter. There are several heuristics used to do the</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// guess. One of the heuristic is based on the &quot;encoding&quot; attribute. The original XML specifications</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="comment">// forbids to use this attribute to do the guess but you can still use it if you set</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// &quot;useXMLEncodingAttribute&quot; to 1 (this is the default behavior and the behavior of most parsers).</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// If an inconsistency in the encoding is detected, then the return value is &quot;0&quot;.</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">XMLCharEncoding</a> guessCharEncoding(<span class="keywordtype">void</span> *buffer, <span class="keywordtype">int</span> bufLen, <span class="keywordtype">char</span> useXMLEncodingAttribute=1);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">// these are functions and structures used internally by the XMLNode class (don&#39;t bother about them):</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;      <span class="keyword">typedef</span> <span class="keyword">struct </span>XMLNodeDataTag <span class="comment">// to allow shallow copy and &quot;intelligent/smart&quot; pointers (automatic delete):</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;          <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>                lpszName;        <span class="comment">// Element name (=NULL if root)</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;          <span class="keywordtype">int</span>                    nChild,          <span class="comment">// Number of child nodes</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                 nText,           <span class="comment">// Number of text fields</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                 nClear,          <span class="comment">// Number of Clear fields (comments)</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                 nAttribute;      <span class="comment">// Number of attributes</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;          <span class="keywordtype">char</span>                   isDeclaration;   <span class="comment">// Whether node is an XML declaration - &#39;&lt;?xml ?&gt;&#39;</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;          <span class="keyword">struct </span>XMLNodeDataTag  *pParent;        <span class="comment">// Pointer to parent element (=NULL if root)</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;          <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a>                *pChild;         <span class="comment">// Array of child nodes</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;          <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>                *pText;          <span class="comment">// Array of text fields</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;          <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a>               *pClear;         <span class="comment">// Array of clear fields</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;          <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a>           *pAttribute;     <span class="comment">// Array of attributes</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;          <span class="keywordtype">int</span>                    *pOrder;         <span class="comment">// order of the child_nodes,text_fields,clear_fields</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;          <span class="keywordtype">int</span>                    ref_count;       <span class="comment">// for garbage collection (smart pointers)</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      } XMLNodeData;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      XMLNodeData *d;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      <span class="keywordtype">char</span> parseClearTag(<span class="keywordtype">void</span> *px, <span class="keywordtype">void</span> *pa);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      <span class="keywordtype">char</span> maybeAddTxT(<span class="keywordtype">void</span> *pa, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> tokenPStr);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      <span class="keywordtype">int</span> ParseXMLElement(<span class="keywordtype">void</span> *pXML);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      <span class="keywordtype">void</span> *addToOrder(<span class="keywordtype">int</span> memInc, <span class="keywordtype">int</span> *_pos, <span class="keywordtype">int</span> nc, <span class="keywordtype">void</span> *p, <span class="keywordtype">int</span> size, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a> xtype);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      <span class="keywordtype">int</span> indexText(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue) <span class="keyword">const</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      <span class="keywordtype">int</span> indexClear(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> lpszValue) <span class="keyword">const</span>;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> addChild_priv(<span class="keywordtype">int</span>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a>,<span class="keywordtype">char</span>,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;      <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> *addAttribute_priv(<span class="keywordtype">int</span>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> addText_priv(<span class="keywordtype">int</span>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a>,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> *addClear_priv(<span class="keywordtype">int</span>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a>,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keywordtype">void</span> deleteNodeContent_priv(<span class="keywordtype">char</span>,<span class="keywordtype">char</span>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a> findPosition(XMLNodeData *d, <span class="keywordtype">int</span> index, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a> xtype);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> CreateXMLStringR(XMLNodeData *pEntry, <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> lpszMarker, <span class="keywordtype">int</span> nFormat);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> removeOrderElement(XMLNodeData *d, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a> t, <span class="keywordtype">int</span> index);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> exactMemory(XMLNodeData *d);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> detachFromParent(XMLNodeData *d);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a40876d6c58776ec0adb69baea534b2de">XMLNode</a>;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">// This structure is given by the function &quot;enumContents&quot;.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct_x_m_l_node_contents.xhtml">XMLNodeContents</a></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;{</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// This dictates what&#39;s the content of the XMLNodeContent</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">enum</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a> etype;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// should be an union to access the appropriate data.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="comment">// compiler does not allow union of object with constructor... too bad.</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="struct_x_m_l_node.xhtml">XMLNode</a> child;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="struct_x_m_l_attribute.xhtml">XMLAttribute</a> attrib;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> text;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="struct_x_m_l_clear.xhtml">XMLClear</a> clear;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;} <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#adb1f38c236e48d32771c48b14ed627d1">XMLNodeContents</a>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a> <span class="keywordtype">void</span> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a6a510c9553d7fa49d0afdda1d7928669">freeXMLString</a>(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> t); <span class="comment">// {free(t);}</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">// Duplicate (copy in a new allocated buffer) the source string. This is</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">// a very handy function when used with all the &quot;XMLNode::*_WOSD&quot; functions.</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">// (If (cbData!=0) then cbData is the number of chars to duplicate)</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a> <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aad53ec351482a517bd0aa7d2370dc909">stringDup</a>(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> source, <span class="keywordtype">int</span> cbData=0);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">// The following class is processing strings so that all the characters</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">// &amp;,&quot;,&#39;,&lt;,&gt; are replaced by their XML equivalent: &amp;amp;, &amp;quot;, &amp;apos;, &amp;lt;, &amp;gt;.</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">// This  class is useful when creating from scratch an XML file using the</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">// &quot;printf&quot;, &quot;fprintf&quot;, &quot;cout&quot;,... functions. If you are creating from scratch an</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">// XML file using the provided XMLNode class you must not use the &quot;ToXMLStringTool&quot;</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">// class (the &quot;XMLNode&quot; class does the processing job for you during rendering).</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">// Using the &quot;ToXMLStringTool class&quot; and the &quot;fprintf function&quot; is THE most efficient</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">// way to produce VERY large XML documents VERY fast.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a> ToXMLStringTool</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00467"></a><span class="lineno"><a class="line" href="struct_to_x_m_l_string_tool.xhtml#a400558cc804818a3b40f2656128edeab">  467</a></span>&#160;    <a class="code" href="struct_to_x_m_l_string_tool.xhtml#a400558cc804818a3b40f2656128edeab">ToXMLStringTool</a>(): buf(<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>),buflen(0){}</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    ~ToXMLStringTool();</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordtype">void</span> freeBuffer();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> toXML(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> source);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// The next function is deprecated because there is a possibility of</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="comment">// &quot;destination-buffer-overflow&quot;. It converts the string</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="comment">// &quot;source&quot; to the string &quot;dest&quot;.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keyword">static</span> <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> toXMLUnSafe(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> dest,<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> source);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> buf;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordtype">int</span> buflen;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}<a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ab184de1d7ae0aa6bcc3c4dee7ee0ddb6">ToXMLStringTool</a>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">// Below is a class that allows you to include any binary data (images, sounds,...)</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">// into an XML document using &quot;Base64 encoding&quot;. This class is completely</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">// separated from the rest of the xmlParser library and can be removed without any problem.</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">// To include some binary data into an XML file, you must convert the binary data into</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">// standard text (using &quot;encode&quot;). To retrieve the original binary data from the</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">// b64-encoded text included inside the XML file use &quot;decode&quot;. Alternatively, these</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">// functions can also be used to &quot;encrypt/decrypt&quot; some critical data contained inside</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">// the XML (it&#39;s not a strong encryption at all, but sometimes it can be useful).</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a> XMLParserBase64Tool</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="struct_x_m_l_parser_base64_tool.xhtml#a5e3ba8eaaa2876a336ae5e222312caf9">  495</a></span>&#160;    <a class="code" href="struct_x_m_l_parser_base64_tool.xhtml#a5e3ba8eaaa2876a336ae5e222312caf9">XMLParserBase64Tool</a>(): buf(<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>),buflen(0){}</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    ~XMLParserBase64Tool();</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordtype">void</span> freeBuffer();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="comment">// returns the length of the base64 string that encodes a data buffer of size inBufLen bytes.</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="comment">// If &quot;formatted&quot; parameter is true, some space will be reserved for a carriage-return every 72 chars.</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> encodeLength(<span class="keywordtype">int</span> inBufLen, <span class="keywordtype">char</span> formatted=0);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="comment">// The &quot;base64Encode&quot; function returns a string containing the base64 encoding of &quot;inByteLen&quot; bytes</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// from &quot;inByteBuf&quot;. If &quot;formatted&quot; parameter is true, then there will be a carriage-return every 72 chars.</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">// The string will be free&#39;d when the XMLParserBase64Tool object is deleted.</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="comment">// All returned strings are sharing the same memory space.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a> encode(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inByteBuf, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inByteLen, <span class="keywordtype">char</span> formatted=0);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="comment">// returns the number of bytes which will be decoded from &quot;inString&quot;.</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> decodeSize(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> inString, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> *xe=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="comment">// returns a pointer to a buffer containing the binary data decoded from &quot;inString&quot;</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="comment">// If &quot;inString&quot; is malformed NULL will be returned</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="comment">// The output buffer will be free&#39;d when the XMLParserBase64Tool object is deleted.</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// All output buffer are sharing the same memory space.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* decode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> inString, <span class="keywordtype">int</span> *outByteLen=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> *xe=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// The next function is deprecated.</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// decodes data from &quot;inString&quot; to &quot;outByteBuf&quot;. You need to provide the size (in byte) of &quot;outByteBuf&quot;</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="comment">// in &quot;inMaxByteOutBuflen&quot;. If &quot;outByteBuf&quot; is not large enough or if data is malformed, then &quot;FALSE&quot;</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="comment">// will be returned; otherwise &quot;TRUE&quot;.</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> decode(<a class="code" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a> inString, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *outByteBuf, <span class="keywordtype">int</span> inMaxByteOutBuflen, <a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a> *xe=<a class="code" href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">void</span> *buf;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">int</span> buflen;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordtype">void</span> alloc(<span class="keywordtype">int</span> newsize);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}<a class="code" href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a90d0646ff4a054f9d8ea0d29fb86f3a9">XMLParserBase64Tool</a>;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="preprocessor">#undef XMLDLLENTRY</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5adcc1aaa78e2f45feb792585ab1d747bd"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5adcc1aaa78e2f45feb792585ab1d747bd">eXMLErrorBase64DecodeBufferTooSmall</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:113</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851ae32d7d859f74292c7474f96804f0cf81"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851ae32d7d859f74292c7474f96804f0cf81">eNodeClear</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:123</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a8596c0bf247f549ff306b6889fe2cb5c"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a8596c0bf247f549ff306b6889fe2cb5c">eXMLErrorCannotOpenWriteFile</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:107</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5ad0687f19145845937f24cecd9f5e9fa9"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5ad0687f19145845937f24cecd9f5e9fa9">eXMLErrorNoElements</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:102</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a55441ddd2419acb3674a9068f5c3930f"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a55441ddd2419acb3674a9068f5c3930f">eXMLErrorFileNotFound</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:103</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851a98e1935d617c2377530661c2d8905d46"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a98e1935d617c2377530661c2d8905d46">eNodeAttribute</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:121</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a85384d57e765bd52aaaa06096cb186d9"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a85384d57e765bd52aaaa06096cb186d9">eXMLErrorBase64DataSizeIsNotMultipleOf4</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:110</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5af2d54f7b3a0299a7051a196a125bf62d"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5af2d54f7b3a0299a7051a196a125bf62d">eXMLErrorBase64DecodeTruncatedData</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:112</div></div>
<div class="ttc" id="struct_x_m_l_attribute_xhtml"><div class="ttname"><a href="struct_x_m_l_attribute.xhtml">XMLAttribute</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:140</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_adb1f38c236e48d32771c48b14ed627d1"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#adb1f38c236e48d32771c48b14ed627d1">XMLNodeContents</a></div><div class="ttdeci">struct XMLNodeContents XMLNodeContents</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a489af43e5e1f882ed5c3dd9f59bbfde4"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a489af43e5e1f882ed5c3dd9f59bbfde4">eXMLErrorMissingEndTagName</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:98</div></div>
<div class="ttc" id="struct_x_m_l_parser_base64_tool_xhtml_a5e3ba8eaaa2876a336ae5e222312caf9"><div class="ttname"><a href="struct_x_m_l_parser_base64_tool.xhtml#a5e3ba8eaaa2876a336ae5e222312caf9">XMLParserBase64Tool::XMLParserBase64Tool</a></div><div class="ttdeci">XMLParserBase64Tool()</div><div class="ttdef"><b>Definition:</b> xmlParser.h:495</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a4eb9d0115e3d9fcfad342c7387c26c63"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a4eb9d0115e3d9fcfad342c7387c26c63">eXMLErrorUnmatchedEndTag</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:99</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ab184de1d7ae0aa6bcc3c4dee7ee0ddb6"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ab184de1d7ae0aa6bcc3c4dee7ee0ddb6">ToXMLStringTool</a></div><div class="ttdeci">struct XMLDLLENTRY ToXMLStringTool ToXMLStringTool</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_aad53ec351482a517bd0aa7d2370dc909"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aad53ec351482a517bd0aa7d2370dc909">stringDup</a></div><div class="ttdeci">XMLDLLENTRY XMLSTR stringDup(XMLCSTR source, int cbData=0)</div><div class="ttdef"><b>Definition:</b> xmlParser.cpp:528</div></div>
<div class="ttc" id="struct_x_m_l_results_xhtml_af0d1358dbb7b124d2e8e4d9052509c8e"><div class="ttname"><a href="struct_x_m_l_results.xhtml#af0d1358dbb7b124d2e8e4d9052509c8e">XMLResults::nColumn</a></div><div class="ttdeci">int nColumn</div><div class="ttdef"><b>Definition:</b> xmlParser.h:131</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5afc16bb8e15fab680665d3b8bedfc980b"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5afc16bb8e15fab680665d3b8bedfc980b">eXMLErrorBase64DecodeIllegalCharacter</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:111</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp_xhtml_adec6e4712d4545b0fcc11000dc0dc0ca"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#adec6e4712d4545b0fcc11000dc0dc0ca">guessWideCharChars</a></div><div class="ttdeci">static char guessWideCharChars</div><div class="ttdef"><b>Definition:</b> xmlParser.cpp:75</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a4a11e7f02fa98cb7850c6d33e5eb9a77"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a4a11e7f02fa98cb7850c6d33e5eb9a77">XMLAttribute</a></div><div class="ttdeci">struct XMLAttribute XMLAttribute</div></div>
<div class="ttc" id="struct_x_m_l_node_contents_xhtml"><div class="ttname"><a href="struct_x_m_l_node_contents.xhtml">XMLNodeContents</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:436</div></div>
<div class="ttc" id="struct_x_m_l_node_xhtml_a81bcd09f9c752b65633c1ca28ea025f2ab55627cb5de434df8e064770f0e32782"><div class="ttname"><a href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2ab55627cb5de434df8e064770f0e32782">XMLNode::encoding_UTF8</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:378</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a1dad0c33ae33d61b2f5f6f7f72838209"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a1dad0c33ae33d61b2f5f6f7f72838209">eXMLErrorCannotWriteFile</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:108</div></div>
<div class="ttc" id="struct_x_m_l_node_xhtml_a719b115adfb642594107854189559ff2"><div class="ttname"><a href="struct_x_m_l_node.xhtml#a719b115adfb642594107854189559ff2">XMLNode::XMLNode</a></div><div class="ttdeci">XMLNode()</div><div class="ttdef"><b>Definition:</b> xmlParser.h:252</div></div>
<div class="ttc" id="_p_d_a_q_2_core_2_include_2xml_parser_8h_xhtml_a849d96105aa0c8f64b5c10d9151a3cdc"><div class="ttname"><a href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a849d96105aa0c8f64b5c10d9151a3cdc">XMLSTR</a></div><div class="ttdeci">#define XMLSTR</div><div class="ttdef"><b>Definition:</b> xmlParser.h:79</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a943343714a3946a264fa0bfa7a4fbe7d"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a943343714a3946a264fa0bfa7a4fbe7d">eXMLErrorMissingTagName</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:97</div></div>
<div class="ttc" id="_p_d_a_q_2_core_2_include_2xml_parser_8h_xhtml_acdb0d6fd8dd596384b438d86cfb2b182"><div class="ttname"><a href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#acdb0d6fd8dd596384b438d86cfb2b182">XMLCSTR</a></div><div class="ttdeci">#define XMLCSTR</div><div class="ttdef"><b>Definition:</b> xmlParser.h:78</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a90b020017d16093c6ccff3ccf3d92ee8"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a90b020017d16093c6ccff3ccf3d92ee8">eXMLErrorUnmatchedEndClearTag</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:100</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851abef700648a317ca089d00a9285791f8f"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851abef700648a317ca089d00a9285791f8f">eNodeChild</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:120</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_aab10d65aadeca1f026f6416becde7432"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aab10d65aadeca1f026f6416becde7432">XMLElementPosition</a></div><div class="ttdeci">int XMLElementPosition</div><div class="ttdef"><b>Definition:</b> xmlParser.h:145</div></div>
<div class="ttc" id="struct_x_m_l_results_xhtml_adb341083266eabf9fe45587b838c0962"><div class="ttname"><a href="struct_x_m_l_results.xhtml#adb341083266eabf9fe45587b838c0962">XMLResults::error</a></div><div class="ttdeci">enum XMLError error</div><div class="ttdef"><b>Definition:</b> xmlParser.h:130</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a6a510c9553d7fa49d0afdda1d7928669"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a6a510c9553d7fa49d0afdda1d7928669">freeXMLString</a></div><div class="ttdeci">XMLDLLENTRY void freeXMLString(XMLSTR t)</div><div class="ttdef"><b>Definition:</b> xmlParser.cpp:72</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac66e91f36b3c0c314c4fc8894820aee8"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac66e91f36b3c0c314c4fc8894820aee8">XMLClear</a></div><div class="ttdeci">struct XMLClear XMLClear</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851a1e67ba6c14f35fdc461da667721bff31"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a1e67ba6c14f35fdc461da667721bff31">eNodeNULL</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:124</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a0961a8e0bbf11a91009adaf4b1c66e46"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a0961a8e0bbf11a91009adaf4b1c66e46">eXMLErrorEmpty</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:96</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a90d0646ff4a054f9d8ea0d29fb86f3a9"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a90d0646ff4a054f9d8ea0d29fb86f3a9">XMLParserBase64Tool</a></div><div class="ttdeci">struct XMLDLLENTRY XMLParserBase64Tool XMLParserBase64Tool</div></div>
<div class="ttc" id="struct_x_m_l_results_xhtml"><div class="ttname"><a href="struct_x_m_l_results.xhtml">XMLResults</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:128</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp_xhtml_a5873e61a244487ba540cb71b39b630f7"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#a5873e61a244487ba540cb71b39b630f7">dropWhiteSpace</a></div><div class="ttdeci">static char dropWhiteSpace</div><div class="ttdef"><b>Definition:</b> xmlParser.cpp:75</div></div>
<div class="ttc" id="struct_x_m_l_clear_xhtml"><div class="ttname"><a href="struct_x_m_l_clear.xhtml">XMLClear</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:135</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_aafbd547d290f82864b1f840025e972bc"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#aafbd547d290f82864b1f840025e972bc">XMLResults</a></div><div class="ttdeci">struct XMLResults XMLResults</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp_xhtml_aab8c180274ed444bbc56a3f413fe106c"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_source_2xml_parser_8cpp.xhtml#aab8c180274ed444bbc56a3f413fe106c">characterEncoding</a></div><div class="ttdeci">static XMLNode::XMLCharEncoding characterEncoding</div><div class="ttdef"><b>Definition:</b> xmlParser.cpp:74</div></div>
<div class="ttc" id="_p_d_a_q_2_core_2_include_2xml_parser_8h_xhtml_aa93f0eb578d23995850d61f7d61c55c1"><div class="ttname"><a href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a></div><div class="ttdeci">#define FALSE</div><div class="ttdef"><b>Definition:</b> xmlParser.h:83</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851">XMLElementType</a></div><div class="ttdeci">XMLElementType</div><div class="ttdef"><b>Definition:</b> xmlParser.h:118</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5">XMLError</a></div><div class="ttdeci">XMLError</div><div class="ttdef"><b>Definition:</b> xmlParser.h:91</div></div>
<div class="ttc" id="_p_d_a_q_2_core_2_include_2xml_parser_8h_xhtml_a990c86ec1cdbf675604a1a321d852063"><div class="ttname"><a href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml#a990c86ec1cdbf675604a1a321d852063">XMLDLLENTRY</a></div><div class="ttdeci">#define XMLDLLENTRY</div><div class="ttdef"><b>Definition:</b> xmlParser.h:59</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a100a496e2b573b37eb4e75f00a316851a0d667f729ee0477d741d7939cf025201"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a100a496e2b573b37eb4e75f00a316851a0d667f729ee0477d741d7939cf025201">eNodeText</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:122</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a26e2e2231f2d3941d4b4bbb96cd9ed2c"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26e2e2231f2d3941d4b4bbb96cd9ed2c">eXMLErrorUnexpectedToken</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:101</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_a40876d6c58776ec0adb69baea534b2de"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#a40876d6c58776ec0adb69baea534b2de">XMLNode</a></div><div class="ttdeci">struct XMLDLLENTRY XMLNode XMLNode</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a164e2a597f12c1b2e186519fc893cc58"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a164e2a597f12c1b2e186519fc893cc58">eXMLErrorNoXMLTagFound</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:95</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a7cf226016a9a9ebc47ee5124e413b511"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a7cf226016a9a9ebc47ee5124e413b511">eXMLErrorNone</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:93</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a750c78b6de79d89e2184fc7caff939e0"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a750c78b6de79d89e2184fc7caff939e0">eXMLErrorFirstTagNotFound</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:104</div></div>
<div class="ttc" id="struct_x_m_l_node_xhtml_a81bcd09f9c752b65633c1ca28ea025f2"><div class="ttname"><a href="struct_x_m_l_node.xhtml#a81bcd09f9c752b65633c1ca28ea025f2">XMLNode::XMLCharEncoding</a></div><div class="ttdeci">XMLCharEncoding</div><div class="ttdef"><b>Definition:</b> xmlParser.h:378</div></div>
<div class="ttc" id="struct_to_x_m_l_string_tool_xhtml_a400558cc804818a3b40f2656128edeab"><div class="ttname"><a href="struct_to_x_m_l_string_tool.xhtml#a400558cc804818a3b40f2656128edeab">ToXMLStringTool::ToXMLStringTool</a></div><div class="ttdeci">ToXMLStringTool()</div><div class="ttdef"><b>Definition:</b> xmlParser.h:467</div></div>
<div class="ttc" id="_d_r_s_8h_xhtml_a070d2ce7b6bb7e5c05602aa8c308d0c4"><div class="ttname"><a href="_d_r_s_8h.xhtml#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a></div><div class="ttdeci">#define NULL</div><div class="ttdef"><b>Definition:</b> DRS.h:33</div></div>
<div class="ttc" id="struct_x_m_l_node_xhtml"><div class="ttname"><a href="struct_x_m_l_node.xhtml">XMLNode</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:149</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a5e54f63f442005ae89fdf1fe4fb17725"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a5e54f63f442005ae89fdf1fe4fb17725">eXMLErrorCharConversionError</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:106</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5a26a80e15de947fae9fb44b67e1a3a263"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5a26a80e15de947fae9fb44b67e1a3a263">eXMLErrorMissingEndTag</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:94</div></div>
<div class="ttc" id="struct_x_m_l_results_xhtml_a8741d887c2843fc1ce8fffc12f662595"><div class="ttname"><a href="struct_x_m_l_results.xhtml#a8741d887c2843fc1ce8fffc12f662595">XMLResults::nLine</a></div><div class="ttdeci">int nLine</div><div class="ttdef"><b>Definition:</b> xmlParser.h:131</div></div>
<div class="ttc" id="_c_d_a_q_2_plugins_2_include_2xml_parser_8h_xhtml_ac39bd07b1461aaa70afffe2d7162b4f5aeca604d14ec57d6dcfdc5e74dbc559dc"><div class="ttname"><a href="_c_d_a_q_2_plugins_2_include_2xml_parser_8h.xhtml#ac39bd07b1461aaa70afffe2d7162b4f5aeca604d14ec57d6dcfdc5e74dbc559dc">eXMLErrorUnknownCharacterEntity</a></div><div class="ttdef"><b>Definition:</b> xmlParser.h:105</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_472fafaf0f039b9e6b043966c1ef7dbf.xhtml">data</a></li><li class="navelem"><a class="el" href="dir_a60e370613dab7e7dc459045dd6e3050.xhtml">Software</a></li><li class="navelem"><a class="el" href="dir_b7037f21e3066119b95b62c0b145af72.xhtml">DAQ</a></li><li class="navelem"><a class="el" href="dir_f16a1199feb0526b88f97700734c6346.xhtml">PDAQ</a></li><li class="navelem"><a class="el" href="dir_ad10ffc1a59efda2451efef380d4736c.xhtml">Core</a></li><li class="navelem"><a class="el" href="dir_ef12b0b33126966955a586281bd8f91e.xhtml">Include</a></li><li class="navelem"><a class="el" href="_p_d_a_q_2_core_2_include_2xml_parser_8h.xhtml">xmlParser.h</a></li>
    <li class="footer">Generated on Mon Jan 4 2016 11:52:44 by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.12 </li>
  </ul>
</div>
</body>
</html>
